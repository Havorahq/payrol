/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace BatchPayments {
  export type AgreementStruct = {
    contractType: string;
    agreementAddress: AddressLike;
  };

  export type AgreementStructOutput = [
    contractType: string,
    agreementAddress: string
  ] & { contractType: string; agreementAddress: string };
}

export interface BatchPaymentsInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addAgreement"
      | "agreements"
      | "getContracts"
      | "owner"
      | "performBatchPayments"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addAgreement",
    values: [string, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "agreements",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getContracts",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "performBatchPayments",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "addAgreement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "agreements", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "performBatchPayments",
    data: BytesLike
  ): Result;
}

export interface BatchPayments extends BaseContract {
  connect(runner?: ContractRunner | null): BatchPayments;
  waitForDeployment(): Promise<this>;

  interface: BatchPaymentsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addAgreement: TypedContractMethod<
    [_contractType: string, _agreementAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  agreements: TypedContractMethod<
    [arg0: BigNumberish],
    [[string, string] & { contractType: string; agreementAddress: string }],
    "view"
  >;

  getContracts: TypedContractMethod<
    [],
    [BatchPayments.AgreementStructOutput[]],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  performBatchPayments: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addAgreement"
  ): TypedContractMethod<
    [_contractType: string, _agreementAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "agreements"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [[string, string] & { contractType: string; agreementAddress: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getContracts"
  ): TypedContractMethod<[], [BatchPayments.AgreementStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "performBatchPayments"
  ): TypedContractMethod<[], [void], "nonpayable">;

  filters: {};
}
