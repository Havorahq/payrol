/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  BatchPayments,
  BatchPaymentsInterface,
} from "../../Batch.sol/BatchPayments";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "string",
            name: "contractType",
            type: "string",
          },
          {
            internalType: "address",
            name: "agreementAddress",
            type: "address",
          },
        ],
        internalType: "struct BatchPayments.Agreement[]",
        name: "_agreements",
        type: "tuple[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_contractType",
        type: "string",
      },
      {
        internalType: "address",
        name: "_agreementAddress",
        type: "address",
      },
    ],
    name: "addAgreement",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "agreements",
    outputs: [
      {
        internalType: "string",
        name: "contractType",
        type: "string",
      },
      {
        internalType: "address",
        name: "agreementAddress",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getContracts",
    outputs: [
      {
        components: [
          {
            internalType: "string",
            name: "contractType",
            type: "string",
          },
          {
            internalType: "address",
            name: "agreementAddress",
            type: "address",
          },
        ],
        internalType: "struct BatchPayments.Agreement[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "performBatchPayments",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b50604051620015ff380380620015ff8339818101604052810190620000379190620004ba565b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060005b81518110156200013c5760018282815181106200009c576200009b6200050b565b5b602002602001015190806001815401808255809150506001900390600052602060002090600202016000909190919091506000820151816000019081620000e4919062000785565b5060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505080806001019150506200007a565b50506200086c565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620001a8826200015d565b810181811067ffffffffffffffff82111715620001ca57620001c96200016e565b5b80604052505050565b6000620001df62000144565b9050620001ed82826200019d565b919050565b600067ffffffffffffffff82111562000210576200020f6200016e565b5b602082029050602081019050919050565b600080fd5b600080fd5b600080fd5b600080fd5b600067ffffffffffffffff8211156200025357620002526200016e565b5b6200025e826200015d565b9050602081019050919050565b60005b838110156200028b5780820151818401526020810190506200026e565b60008484015250505050565b6000620002ae620002a88462000235565b620001d3565b905082815260208101848484011115620002cd57620002cc62000230565b5b620002da8482856200026b565b509392505050565b600082601f830112620002fa57620002f962000158565b5b81516200030c84826020860162000297565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620003428262000315565b9050919050565b620003548162000335565b81146200036057600080fd5b50565b600081519050620003748162000349565b92915050565b60006040828403121562000393576200039262000226565b5b6200039f6040620001d3565b9050600082015167ffffffffffffffff811115620003c257620003c16200022b565b5b620003d084828501620002e2565b6000830152506020620003e68482850162000363565b60208301525092915050565b6000620004096200040384620001f2565b620001d3565b905080838252602082019050602084028301858111156200042f576200042e62000221565b5b835b818110156200047d57805167ffffffffffffffff81111562000458576200045762000158565b5b8086016200046789826200037a565b8552602085019450505060208101905062000431565b5050509392505050565b600082601f8301126200049f576200049e62000158565b5b8151620004b1848260208601620003f2565b91505092915050565b600060208284031215620004d357620004d26200014e565b5b600082015167ffffffffffffffff811115620004f457620004f362000153565b5b620005028482850162000487565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200058d57607f821691505b602082108103620005a357620005a262000545565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026200060d7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82620005ce565b620006198683620005ce565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b600062000666620006606200065a8462000631565b6200063b565b62000631565b9050919050565b6000819050919050565b620006828362000645565b6200069a62000691826200066d565b848454620005db565b825550505050565b600090565b620006b1620006a2565b620006be81848462000677565b505050565b5b81811015620006e657620006da600082620006a7565b600181019050620006c4565b5050565b601f8211156200073557620006ff81620005a9565b6200070a84620005be565b810160208510156200071a578190505b620007326200072985620005be565b830182620006c3565b50505b505050565b600082821c905092915050565b60006200075a600019846008026200073a565b1980831691505092915050565b600062000775838362000747565b9150826002028217905092915050565b62000790826200053a565b67ffffffffffffffff811115620007ac57620007ab6200016e565b5b620007b8825462000574565b620007c5828285620006ea565b600060209050601f831160018114620007fd5760008415620007e8578287015190505b620007f4858262000767565b86555062000864565b601f1984166200080d86620005a9565b60005b82811015620008375784890151825560018201915060208501945060208101905062000810565b8683101562000857578489015162000853601f89168262000747565b8355505b6001600288020188555050505b505050505050565b610d83806200087c6000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80633f26781e1461005c57806364b65f6e146100665780638da5cb5b14610082578063bd14de96146100a0578063c3a2a93a146100d1575b600080fd5b6100646100ef565b005b610080600480360381019061007b91906106cb565b61017f565b005b61008a6102cc565b6040516100979190610736565b60405180910390f35b6100ba60048036038101906100b59190610787565b6102f0565b6040516100c8929190610833565b60405180910390f35b6100d96103cc565b6040516100e691906109bb565b60405180910390f35b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461017d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161017490610a4f565b60405180910390fd5b565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461020d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161020490610a4f565b60405180910390fd5b600060405180604001604052808481526020018373ffffffffffffffffffffffffffffffffffffffff1681525090506001819080600181540180825580915050600190039060005260206000209060020201600090919091909150600082015181600001908161027d9190610c7b565b5060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6001818154811061030057600080fd5b906000526020600020906002020160009150905080600001805461032390610a9e565b80601f016020809104026020016040519081016040528092919081815260200182805461034f90610a9e565b801561039c5780601f106103715761010080835404028352916020019161039c565b820191906000526020600020905b81548152906001019060200180831161037f57829003601f168201915b5050505050908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905082565b60606001805480602002602001604051908101604052809291908181526020016000905b8282101561050a578382906000526020600020906002020160405180604001604052908160008201805461042390610a9e565b80601f016020809104026020016040519081016040528092919081815260200182805461044f90610a9e565b801561049c5780601f106104715761010080835404028352916020019161049c565b820191906000526020600020905b81548152906001019060200180831161047f57829003601f168201915b505050505081526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681525050815260200190600101906103f0565b50505050905090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61057a82610531565b810181811067ffffffffffffffff8211171561059957610598610542565b5b80604052505050565b60006105ac610513565b90506105b88282610571565b919050565b600067ffffffffffffffff8211156105d8576105d7610542565b5b6105e182610531565b9050602081019050919050565b82818337600083830152505050565b600061061061060b846105bd565b6105a2565b90508281526020810184848401111561062c5761062b61052c565b5b6106378482856105ee565b509392505050565b600082601f83011261065457610653610527565b5b81356106648482602086016105fd565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006106988261066d565b9050919050565b6106a88161068d565b81146106b357600080fd5b50565b6000813590506106c58161069f565b92915050565b600080604083850312156106e2576106e161051d565b5b600083013567ffffffffffffffff811115610700576106ff610522565b5b61070c8582860161063f565b925050602061071d858286016106b6565b9150509250929050565b6107308161068d565b82525050565b600060208201905061074b6000830184610727565b92915050565b6000819050919050565b61076481610751565b811461076f57600080fd5b50565b6000813590506107818161075b565b92915050565b60006020828403121561079d5761079c61051d565b5b60006107ab84828501610772565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156107ee5780820151818401526020810190506107d3565b60008484015250505050565b6000610805826107b4565b61080f81856107bf565b935061081f8185602086016107d0565b61082881610531565b840191505092915050565b6000604082019050818103600083015261084d81856107fa565b905061085c6020830184610727565b9392505050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600082825260208201905092915050565b60006108ab826107b4565b6108b5818561088f565b93506108c58185602086016107d0565b6108ce81610531565b840191505092915050565b6108e28161068d565b82525050565b6000604083016000830151848203600086015261090582826108a0565b915050602083015161091a60208601826108d9565b508091505092915050565b600061093183836108e8565b905092915050565b6000602082019050919050565b600061095182610863565b61095b818561086e565b93508360208202850161096d8561087f565b8060005b858110156109a9578484038952815161098a8582610925565b945061099583610939565b925060208a01995050600181019050610971565b50829750879550505050505092915050565b600060208201905081810360008301526109d58184610946565b905092915050565b7f596f7520617265206e6f7420616c6c6f77656420746f206361727279206f757460008201527f207468697320616374696f6e0000000000000000000000000000000000000000602082015250565b6000610a39602c836107bf565b9150610a44826109dd565b604082019050919050565b60006020820190508181036000830152610a6881610a2c565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610ab657607f821691505b602082108103610ac957610ac8610a6f565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302610b317fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610af4565b610b3b8683610af4565b95508019841693508086168417925050509392505050565b6000819050919050565b6000610b78610b73610b6e84610751565b610b53565b610751565b9050919050565b6000819050919050565b610b9283610b5d565b610ba6610b9e82610b7f565b848454610b01565b825550505050565b600090565b610bbb610bae565b610bc6818484610b89565b505050565b5b81811015610bea57610bdf600082610bb3565b600181019050610bcc565b5050565b601f821115610c2f57610c0081610acf565b610c0984610ae4565b81016020851015610c18578190505b610c2c610c2485610ae4565b830182610bcb565b50505b505050565b600082821c905092915050565b6000610c5260001984600802610c34565b1980831691505092915050565b6000610c6b8383610c41565b9150826002028217905092915050565b610c84826107b4565b67ffffffffffffffff811115610c9d57610c9c610542565b5b610ca78254610a9e565b610cb2828285610bee565b600060209050601f831160018114610ce55760008415610cd3578287015190505b610cdd8582610c5f565b865550610d45565b601f198416610cf386610acf565b60005b82811015610d1b57848901518255600182019150602085019450602081019050610cf6565b86831015610d385784890151610d34601f891682610c41565b8355505b6001600288020188555050505b50505050505056fea2646970667358221220bd9f3a5511742440d5a7486785d20da374095648e19aa82706f4a8bd025781ce64736f6c63430008180033";

type BatchPaymentsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BatchPaymentsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class BatchPayments__factory extends ContractFactory {
  constructor(...args: BatchPaymentsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _agreements: BatchPayments.AgreementStruct[],
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(_agreements, overrides || {});
  }
  override deploy(
    _agreements: BatchPayments.AgreementStruct[],
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(_agreements, overrides || {}) as Promise<
      BatchPayments & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): BatchPayments__factory {
    return super.connect(runner) as BatchPayments__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BatchPaymentsInterface {
    return new Interface(_abi) as BatchPaymentsInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): BatchPayments {
    return new Contract(address, _abi, runner) as unknown as BatchPayments;
  }
}
